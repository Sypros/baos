//
// Copyright (c) 2002-2019 WEINZIERL ENGINEERING GmbH
// All rights reserved.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY,
// WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
//

#ifndef __WZF_UTILITY_LOGGER_LOGGER_FORMATTER_H__
#define __WZF_UTILITY_LOGGER_LOGGER_FORMATTER_H__

#include "kdrive/utility/Config.h"
#include "kdrive/utility/Forwards.h"
#include <Poco/Logger.h>
#include <string>
#include <vector>
#include <cstddef>
#include <sstream>

namespace kdrive
{
namespace utility
{

class wzfUtility_API LoggerFormatter
{
public:
	LoggerFormatter();
	LoggerFormatter(const std::string& format);
	~LoggerFormatter();

	/*!
		Creates a logger from a Poco Channel
	*/
	void initLogger(Poco::Channel* channel);

	/*!
		Creates a Console Logger
	*/
	void initRootConsoleLogger();

	/*!
		Creates a File Logger, the filename will be autogenerated
		in the format: logfile_{PID}.txt where {PID} is the application pid
	*/
	void initRootFileLogger();

	/*!
		Creates a File Logger with a specified filename
	*/
	void initRootFileLogger(const std::string& filename);

#if KDRIVE_REMOTE_SYSLOG_LOGGER_ENABLED == 1
	/*!
		Creates a Remote Syslog Logger
	*/
	void initRootRemoteLogger(const std::string& address, const std::string& name);
#endif

	/*!
		Sets the Logger Format
		This is used in initLogger, so if you want to change the default format
		("%H:%M:%S:%i [%s] %t") call setFormat before you call any of the initLogger
		or initRootLogger* functions
	*/
	void setFormat(const std::string& format);
	const std::string& getFormat() const;

	/*******************************
	** Standard string conversion functions to a HEX format
	********************************/

	static std::string toHex(const std::vector<unsigned char>& v);
	static std::string toHex(const unsigned char* buffer, std::size_t bufferSize);
	static std::string toHex(const std::vector<unsigned short>& v);
	static std::string toHex(const unsigned short* buffer, std::size_t bufferSize);
	static std::string toHex(const std::vector<std::vector<unsigned char> >& values);

	/*******************************
	** Standard string conversion functions
	********************************/

	static std::string toString(const std::vector<int>& v);
	static std::string toString(const int* buffer, std::size_t bufferSize);
	static std::string toString(const Poco::Dynamic::Var& var, bool showHex = true, bool showDec = true);

	/*!
		We assume a string formatted like the LoggerFormatter::toHex(vector) function:
		01 02 0A 56 etc ...
		where each two character string pair is a hex value
		and each pair is separated by a space
	*/
	static std::vector<unsigned char> parseHex(const std::string& hexString);

private:
	std::string format_;
};


/*!
	converts a iterable unsigned char sequence to a std::string
	@param iterable the byte sequence to convert
	@return the converted string
*/
template<class T>
std::string toString(const T& iterable)
{
	std::stringstream ss;
	for (typename T::const_iterator iter = iterable.begin(); iter< iterable.end(); iter++)
	{
		ss << std::hex << static_cast<int>(static_cast<unsigned char>(*iter)) << " ";
	}
	return ss.str();
}

template <class T>
void logException(Poco::Logger& logger, const std::string& message, int code = 0)
{
	poco_error(logger, Poco::format("error: %s code: %d", message, code));
	throw T(message, code);
}

}
} // end namespace kdrive::utility

#define INIT_ROOT_CONSOLE_LOGGER() \
	kdrive::utility::LoggerFormatter loggerFormatter; \
	loggerFormatter.initRootConsoleLogger(); \
	poco_information(Poco::Logger::root(), "Console Logger Started");

#define INIT_ROOT_FILE_LOGGER() \
	kdrive::utility::LoggerFormatter loggerFormatter; \
	loggerFormatter.initRootFileLogger(); \
	poco_information(Poco::Logger::root(), "File Logger Started")

#if KDRIVE_REMOTE_SYSLOG_LOGGER_ENABLED == 1
#define INIT_ROOT_REMOTE_SYSLOG_LOGGER(ADDRESS, NAME) \
	kdrive::utility::LoggerFormatter loggerFormatter; \
	loggerFormatter.initRootRemoteLogger((ADDRESS), (NAME)); \
	poco_information(Poco::Logger::root(), "Remote Syslog Logger Started")
#endif

#endif // __WZF_UTILITY_LOGGER_LOGGER_FORMATTER_H__
